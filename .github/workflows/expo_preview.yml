name: Expo Preview
on: [pull_request]

jobs:
  publish:
    name: Install and publish
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.owner.login == 'Trancever'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Setup Expo
        uses: expo/expo-github-action@v7
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Restore dependencies
        id: yarn-cache
        uses: actions/cache/restore@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}-${{ hashFiles('**/package.json', '!node_modules/**') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          sudo corepack enable
          yarn --cwd example --immutable
          yarn --immutable

      - name: Cache dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: '**/node_modules'
          key: ${{ steps.yarn-cache.outputs.cache-primary-key }}

      - name: Publish Expo app
        working-directory: ./example
        run: expo publish --release-channel=pr-${{ github.event.number }}
        env:
          EXPO_USE_DEV_SERVER: true

      - name: Get expo link
        id: expo
        run: echo "::set-output name=path::@trensik/reanimated-collapsible-helpers-example?release-channel=pr-${{ github.event.number }}"

      - name: Comment on PR
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const body = 'The Expo app for the example from this branch is ready!\n\n[expo.io/${{ steps.expo.outputs.path }}](https://expo.io/${{ steps.expo.outputs.path }})\n\n<a href="https://exp.host/${{ steps.expo.outputs.path }}"><img src="https://api.qrserver.com/v1/create-qr-code/?size=400x400&data=exp://exp.host/${{ steps.expo.outputs.path }}" height="200px" width="200px"></a>';
            const comments = await github.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            if (comments.data.some(comment => comment.body === body)) {
              return;
            }
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })